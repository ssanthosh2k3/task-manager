pipeline {
    agent any

    environment {
        IMAGE_NAME = 'santhoshadmin/java-task' // Docker image name for the Java application
        RECIPIENT_EMAIL = 'santhoshtech43@gmail.com' // Email to send report to
    }

    stages {
        stage('Checkout Code') {
            steps {
                // Checkout the code from the main branch
                git branch: 'main', url: 'https://github.com/ssanthosh2k3/task-manager.git'
            }
        }

        stage('Build Java Application') {
            steps {
                script {
                    // Run Maven to build the Java application
                    sh 'mvn clean package'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Build the Docker image using shell commands
                    sh """
                    echo 'Building Docker image...'
                    docker build -t ${IMAGE_NAME}:${env.BUILD_ID} .
                    """
                }
            }
        }

        stage('Trivy Image Scan') {
            steps {
                script {
                    // Scan the Docker image for vulnerabilities using Trivy
                    sh """
                    docker run --rm \
                    -v /var/run/docker.sock:/var/run/docker.sock \
                    -v \$(pwd):/workspace \
                    aquasec/trivy \
                    image --severity HIGH,CRITICAL --output trivy_report.json ${IMAGE_NAME}:${env.BUILD_ID}
                    """
                }
            }
        }

        stage('Send Trivy Report Email') {
            steps {
                script {
                    // Send email with the Trivy report attached
                    emailext(
                        to: "${RECIPIENT_EMAIL}",
                        subject: "Trivy Scan Report for ${IMAGE_NAME}:${env.BUILD_ID}",
                        body: """
                        Please find the attached Trivy scan report for the image: ${IMAGE_NAME}:${env.BUILD_ID}.
                        """,
                        attachments: "trivy_report.json"
                    )
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    // Use stored Docker Hub credentials to log in and push the image
                    withCredentials([string(credentialsId: 'Docker_hub', variable: 'DOCKER_HUB_TOKEN')]) {
                        sh """
                        echo 'Logging into Docker Hub...'
                        echo '${DOCKER_HUB_TOKEN}' | docker login -u santhoshadmin --password-stdin
                        
                        echo 'Tagging and pushing the Docker image...'
                        docker tag ${IMAGE_NAME}:${env.BUILD_ID} ${IMAGE_NAME}:latest
                        docker push ${IMAGE_NAME}:${env.BUILD_ID}
                        docker push ${IMAGE_NAME}:latest
                        """
                    }
                }
            }
        }

        stage('Clean Up Docker Images') {
            steps {
                script {
                    // Remove the Docker images from the Jenkins server
                    sh """
                    echo 'Removing local Docker images...'
                    docker rmi ${IMAGE_NAME}:${env.BUILD_ID} || true
                    docker rmi ${IMAGE_NAME}:latest || true
                    docker rmi \$(docker images -f "dangling=true" -q) || true
                    """
                }
            }
        }
    }

    post {
        always {
            cleanWs() // Clean workspace after the job is complete
        }
    }
}
