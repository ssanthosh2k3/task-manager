pipeline {
    agent any

    environment {
        IMAGE_NAME = 'santhoshadmin/java-task' // Docker image name for the Java application
        SONAR_URL = 'http://164.52.204.161:9000' // SonarQube server URL
    }

    stages {
        stage('Checkout Code') {
            steps {
                // Checkout the code from the main branch
                git branch: 'main', url: 'https://github.com/ssanthosh2k3/task-manager.git'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                script {
                    withCredentials([string(credentialsId: 'sonar-tok', variable: 'SONAR_TOKEN')]) {
                        try {
                            // Run SonarQube scanner inside Docker container
                            sh '''
                            docker run --rm \
                            -v $(pwd):/usr/src \
                            -w /usr/src \
                            sonarsource/sonar-scanner-cli \
                            sonar-scanner \
                            -Dsonar.projectKey=task-manager \
                            -Dsonar.sources=. \
                            -Dsonar.host.url=${SONAR_URL} \
                            -Dsonar.login=${SONAR_TOKEN}
                            '''
                        } catch (Exception e) {
                            error "SonarQube analysis failed: ${e.message}"
                        }
                    }
                }
            }
        }

        stage('Build Java Application') {
            steps {
                script {
                    // Run Maven to build the Java application
                    sh 'mvn clean package'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Build the Docker image using shell commands
                    sh """
                    echo 'Building Docker image...'
                    docker build -t ${IMAGE_NAME}:${env.BUILD_ID} .
                    """
                }
            }
        }

        stage('Trivy Image Scan') {
            steps {
                script {
                    // Scan the Docker image for vulnerabilities using Trivy
                    sh """
                    docker run --rm \
                    -v /var/run/docker.sock:/var/run/docker.sock \
                    aquasec/trivy \
                    image --severity HIGH,CRITICAL ${IMAGE_NAME}:${env.BUILD_ID} --debug
                    """
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    // Use stored Docker Hub credentials to log in and push the image
                    withCredentials([string(credentialsId: 'Docker_hub', variable: 'DOCKER_HUB_TOKEN')]) {
                        sh """
                        echo 'Logging into Docker Hub...'
                        echo '${DOCKER_HUB_TOKEN}' | docker login -u santhoshadmin --password-stdin
                        
                        echo 'Tagging and pushing the Docker image...'
                        docker tag ${IMAGE_NAME}:${env.BUILD_ID} ${IMAGE_NAME}:latest
                        docker push ${IMAGE_NAME}:${env.BUILD_ID}
                        docker push ${IMAGE_NAME}:latest
                        """
                    }
                }
            }
        }

        stage('Clean Up Docker Images') {
            steps {
                script {
                    // Remove the Docker images from the Jenkins server
                    sh """
                    echo 'Removing local Docker images...'
                    docker rmi ${IMAGE_NAME}:${env.BUILD_ID} || true
                    docker rmi ${IMAGE_NAME}:latest || true
                    docker rmi \$(docker images -f "dangling=true" -q) || true
                    """
                }
            }
        }
    }

    post {
        always {
            cleanWs() // Clean workspace after the job is complete
        }
        failure {
            // Log an error message when the build fails
            echo 'The build has failed. Please check the logs for more details.'
            // Optionally, add email notifications or other actions here
        }
    }
}
